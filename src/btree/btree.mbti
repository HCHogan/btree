package "HCHogan/btree/btree"

// Values
fn[K : Compare, V] from_array(Array[(K, V)]) -> T[K, V]

fn[K, V] new() -> T[K, V]

// Types and methods
type T[K, V]
fn[K : Compare, V] T::add(Self[K, V], K, V) -> Unit
fn[K, V] T::clear(Self[K, V]) -> Unit
fn[K : Compare, V] T::contains(Self[K, V], K) -> Bool
fn[K : Compare, V] T::get(Self[K, V], K) -> V?
fn[K, V] T::new() -> Self[K, V]
fn[K : Compare, V] T::remove(Self[K, V], K) -> Unit
fn[K, V] T::size(Self[K, V]) -> Int
fn[K : Compare + Show, V] T::to_string_pretty(Self[K, V]) -> String

// Type aliases

// Traits

